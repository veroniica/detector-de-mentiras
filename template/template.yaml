AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless architecture for forensic audio analysis using AWS AI services'

Parameters:
  ProjectName:
    Type: String
    Default: forensic-audio-analysis
    Description: Name of the project used for resource naming

  AudioBucketName:
    Type: String
    Description: Name of the S3 bucket for audio files
    Default: forensic-audio-files

  ResultsBucketName:
    Type: String
    Description: Name of the S3 bucket for results
    Default: forensic-audio-results

Resources:
  # S3 Buckets
  AudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AudioBucketName}-${AWS::AccountId}"
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  ResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ResultsBucketName}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled

  # DynamoDB Tables
  AudioMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-audio-metadata"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: audioId
          AttributeType: S
      KeySchema:
        - AttributeName: audioId
          KeyType: HASH

  TranscriptionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-transcriptions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: audioId
          AttributeType: S
      KeySchema:
        - AttributeName: audioId
          KeyType: HASH

  AnalysisResultsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-analysis-results"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: audioId
          AttributeType: S
      KeySchema:
        - AttributeName: audioId
          KeyType: HASH

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt AudioBucket.Arn
                  - !Sub "${AudioBucket.Arn}/*"
                  - !GetAtt ResultsBucket.Arn
                  - !Sub "${ResultsBucket.Arn}/*"
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt AudioMetadataTable.Arn
                  - !GetAtt TranscriptionTable.Arn
                  - !GetAtt AnalysisResultsTable.Arn
        - PolicyName: TranscribeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - transcribe:StartTranscriptionJob
                  - transcribe:GetTranscriptionJob
                Resource: '*'
        - PolicyName: ComprehendAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - comprehend:DetectSentiment
                  - comprehend:DetectKeyPhrases
                  - comprehend:BatchDetectSentiment
                  - comprehend:BatchDetectKeyPhrases
                Resource: '*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
        - PolicyName: StepFunctionsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                Resource: !GetAtt AudioProcessingStateMachine.Arn

  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  # Lambda Functions
  AudioProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-audio-processor"
      Handler: audio_processor.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ResultsBucket
        S3Key: lambda/audio_processor.zip
      Runtime: python3.9
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          AUDIO_BUCKET: !Ref AudioBucket
          RESULTS_BUCKET: !Ref ResultsBucket
          METADATA_TABLE: !Ref AudioMetadataTable
          STATE_MACHINE_ARN: !Ref AudioProcessingStateMachine

  TranscriptionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-transcription"
      Handler: transcription.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ResultsBucket
        S3Key: lambda/transcription.zip
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          AUDIO_BUCKET: !Ref AudioBucket
          RESULTS_BUCKET: !Ref ResultsBucket
          TRANSCRIPTION_TABLE: !Ref TranscriptionTable

  SentimentAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-sentiment-analysis"
      Handler: sentiment_analysis.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ResultsBucket
        S3Key: lambda/sentiment_analysis.zip
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
          ANALYSIS_TABLE: !Ref AnalysisResultsTable

  SummaryGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-summary-generator"
      Handler: summary_generator.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ResultsBucket
        S3Key: lambda/summary_generator.zip
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
          ANALYSIS_TABLE: !Ref AnalysisResultsTable

  InconsistencyDetectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-inconsistency-detector"
      Handler: inconsistency_detector.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ResultsBucket
        S3Key: lambda/inconsistency_detector.zip
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
          TRANSCRIPTION_TABLE: !Ref TranscriptionTable
          ANALYSIS_TABLE: !Ref AnalysisResultsTable

  # EventBridge Rule
  AudioUploadRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-audio-upload-rule"
      Description: "Rule to trigger processing when audio files are uploaded to S3"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref AudioBucket
          object:
            key:
              - prefix: ""
      State: ENABLED
      Targets:
        - Arn: !GetAtt AudioProcessorFunction.Arn
          Id: "AudioProcessorTarget"

  # Lambda Permission for EventBridge
  AudioProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AudioProcessorFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AudioUploadRule.Arn

  # Step Functions State Machine
  AudioProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${ProjectName}-audio-processing"
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      Definition:
        Comment: "State machine for processing audio files"
        StartAt: TranscribeAudio
        States:
          TranscribeAudio:
            Type: Task
            Resource: !GetAtt TranscriptionFunction.Arn
            Next: Parallel
          Parallel:
            Type: Parallel
            Branches:
              - StartAt: AnalyzeSentiment
                States:
                  AnalyzeSentiment:
                    Type: Task
                    Resource: !GetAtt SentimentAnalysisFunction.Arn
                    End: true
              - StartAt: GenerateSummary
                States:
                  GenerateSummary:
                    Type: Task
                    Resource: !GetAtt SummaryGeneratorFunction.Arn
                    End: true
            Next: DetectInconsistencies
          DetectInconsistencies:
            Type: Task
            Resource: !GetAtt InconsistencyDetectorFunction.Arn
            End: true

Outputs:
  AudioBucketName:
    Description: "Name of the S3 bucket for audio files"
    Value: !Ref AudioBucket

  ResultsBucketName:
    Description: "Name of the S3 bucket for results"
    Value: !Ref ResultsBucket

  StateMachineArn:
    Description: "ARN of the Step Functions state machine"
    Value: !Ref AudioProcessingStateMachine